"==============================
" vimrc plugins setting
"==============================

" memolist.vim
if neobundle#tap('memolist.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:memolist_memo_suffix = 'md'
    let g:memolist_template_dir_path =  $DOTVIM.'/template/memo'

    nnoremap <Leader>mn :MemoNew<CR>
    nnoremap <Leader>ml :MemoList<CR>
    nnoremap <Leader>mg :MemoGrep<CR> 
  endfunction
  call neobundle#untap()
endif

" Previm
if neobundle#tap('previm')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:previm_open_cmd = ''

    augroup PrevimSettings
      autocmd!
      autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
    augroup END

    nnoremap [previm] <Nop>
    nmap <Space>p [previm]
    nnoremap <silent> [previm]o :<C-u>PrevimOpen<CR>
  endfunction
  call neobundle#untap()
endif

" simple-javascript-indenter
if neobundle#tap('simple-javascript-indenter')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:SimpleJsIndenter_BriefMode = 1
    let g:SimpleJsIndenter_CaseIndentLevel = -1
  endfunction
  call neobundle#untap()
endif

function! s:open_current(path)
  let path = 'file://localhost/' . expand(a:path)
  execute 'OpenBrowser' path
endfunction

" open-browser
if neobundle#tap('open-browser.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    nmap <Leader>os <Plug>(openbrowser-smart-search)
    vmap <Leader>os <Plug>(openbrowser-smart-search)

    nmap <Leader>oc :<C-u>call <SID>open_current(expand('%:p'))<CR>
  endfunction
  call neobundle#untap()
endif

" NERD-Commenter
if neobundle#tap('nerdcommenter')
  function! neobundle#tapped.hooks.on_source(bundle)
    nmap <Leader>c <Plug>NERDCommenterToggle
    vmap <Leader>c <Plug>NERDCommenterToggle
  endfunction
  call neobundle#untap()
endif

" vim-watchdogs
if neobundle#tap('vim-watchdogs')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:watchdogs_check_BufWritePost_enable = 1
    if !exists('g:quickrun_config')
      let g:quickrun_config = {}
    endif
    let g:quickrun_config['watchdogs_checker/_'] = {
          \ 'outputter/quickfix/open_cmd' : '',
          \ 'hook/hier_update/enable_exit' : 1
          \}
    call watchdogs#setup(g:quickrun_config)
  endfunction
  call neobundle#untap()
endif

" vim-textobj-multiblock
if neobundle#tap('vim-textobj-multiblock')
  function! neobundle#tapped.hooks.on_source(bundle)
    omap ab <Plug>(textobj-multiblock-a)
    omap ib <Plug>(textobj-multiblock-i)
    vmap ab <Plug>(textobj-multiblock-a)
    vmap ab <Plug>(textobj-multiblock-i)
  endfunction
  call neobundle#untap()
endif

" emmet-vim
if neobundle#tap('emmet-vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:user_emmet_leader_key = '<C-c>'
    let g:user_emmet_settings = {
          \ 'variables' : {
          \   'lang' : 'ja'
          \ },
          \ 'html' : {
          \   'filters' : 'html',
          \   'indentation' : '    '
          \ }
          \}
  endfunction
  call neobundle#untap()
endif

" incsearch.vim
if neobundle#tap('incsearch.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:incsearch#auto_nohlsearch = 1
    map / <Plug>(incsearch-forward)
    map ? <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
    map n <Plug>(incsearch-nohl-n)
    nmap n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
    map N <Plug>(incsearch-nohl-N)
    nmap N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)
    map * <Plug>(incsearch-nohl-*)
    map # <Plug>(incsearch-nohl-#)
    map g* <Plug>(incsearch-nohl-g*)
    map g# <Plug>(incsearch-nohl-g#)
  endfunction
  call neobundle#untap()
endif

" unite.vim
if neobundle#tap('unite.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:unite_source_file_mru_limit = 200
    let g:unite_data_directory = $VIM_CACHE. '/.unite'

    nnoremap [unite] <Nop>
    nmap <Space>u [unite]

    nnoremap <silent> [unite]f :<C-u>Unite buffer<CR>
    nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
    nnoremap <silent> [unite]s :<C-u>Unite source<CR>
    nnoremap <silent> [unite]o :<C-u>Unite outline<CR>
  endfunction
  call neobundle#untap()
endif
