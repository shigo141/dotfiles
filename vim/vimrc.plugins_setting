" vimrc plugins setting
" memolist.vim {{{
if neobundle#tap('memolist.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:memolist_path = "~/Dropbox/memo"
    let g:memolist_memo_suffix = 'md'
    let g:memolist_template_dir_path = $DOTVIM.'/template/memo'
  endfunction
  nnoremap <Leader>mn :MemoNew<CR>
  nnoremap <Leader>ml :MemoList<CR>
  nnoremap <Leader>mg :MemoGrep<CR>
  call neobundle#untap()
endif
"}}}

" indentLine {{{
if neobundle#tap('indentLine')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:indentLine_color_term = 239
  endfunction
  call neobundle#untap()
endif
"}}}

" NERD-Commenter {{{
if neobundle#tap('nerdcommenter')
  function! neobundle#tapped.hooks.on_source(bundle)
    nmap <Leader>c <Plug>NERDCommenterToggle
    vmap <Leader>c <Plug>NERDCommenterToggle
  endfunction
  call neobundle#untap()
endif
"}}}

" simple-javascript-indenter {{{
if neobundle#tap('simple-javascript-indenter')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:SimpleJsIndenter_BriefMode = 1
    let g:SimpleJsIndenter_CaseIndentLevel = -1
  endfunction
  call neobundle#untap()
endif
"}}}

" open-browser {{{
if neobundle#tap('open-browser.vim')
    nmap <Leader>os <Plug>(openbrowser-smart-search)
    vmap <Leader>os <plug>(openbrowser-smart-search)

    command! OpenBrowerCurrent execute "OpenBrowser" 'file://localhost/'.expand("%:p")

    nmap <Leader>oc :<C-u>OpenBrowerCurrent<CR>
  call neobundle#untap()
endif
"}}}

" unite.vim {{{
if neobundle#tap('unite.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:unite_source_file_mru_limit = 200
    let g:unite_data_directory = $VIM_CACHE.'/.unite'

    noremap [unite] <Nop>
    nmap <Space>u [unite]

    nnoremap <silent> [unite]f :<C-u>Unite buffer<CR>
    nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
    nnoremap <silent> [unite]s :<C-u>Unite source<CR>
    nnoremap <silent> [unite]o :<C-u>Unite outline<CR>
  endfunction
  call neobundle#untap()
endif
"}}}

" previm{{{
if neobundle#tap('previm')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:previm_open_cmd = ''

    nnoremap [previm] <Nop>
    nmap <Space>p [previm]
    nnoremap <silent> [previm]o :<C-u>PrevimOpen<CR>
  endfunction
  call neobundle#untap()
endif
"}}}

" lightline.vim{{{
if neobundle#tap('lightline.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:lightline = {
          \ 'colorscheme': 'jellybeans',
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ],
          \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
          \ },
          \ 'component': {
          \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
          \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
          \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
          \ },
          \ 'component_visible_condition': {
          \   'readonly': '(&filetype!="help"&& &readonly)',
          \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
          \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
          \ },
          \ 'separator': { 'left': '⮀', 'right': '⮂' },
          \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
          \ }
  endfunction
  call neobundle#untap()
endif
"}}}

" vim-fugitive {{{
if neobundle#tap('vim-fugitive')
  function! neobundle#tapped.hooks.on_source(bundle)
  endfunction
  nnoremap <Leader>gc :<C-u>Gcommit -v<CR>
  nnoremap <Leader>gs :<C-u>Gstatus<CR>
  nnoremap <Leader>ga :<C-u>Gwrite<CR>
  nnoremap <Leader>gd :<C-u>Gdiff<CR>
  nnoremap <Leader>gb :<C-u>Gblame<CR>
  call neobundle#untap()
endif
"}}}

" vim-fullscrenn {{{
if neobundle#tap('vim-fullscreen')
  nmap <C-CR> <Plug>(fullscreen-toggle)
endif
"}}}

" incsearch.vim {{{
if neobundle#tap('incsearch.vim')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:incsearch#auto_nohlsearch = 1
    map / <Plug>(incsearch-forward)
    map ? <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
    map n <Plug>(incsearch-nohl-n)
    nmap n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
    map N <Plug>(incsearch-nohl-N)
    nmap N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)
    map * <Plug>(incsearch-nohl-*)
    map # <Plug>(incsearch-nohl-#)
    map g* <Plug>(incsearch-nohl-g*)
    map g# <Plug>(incsearch-nohl-g#)
  endfunction
  call neobundle#untap()
endif
" }}}

" SQLUtilities {{{
if neobundle#tap('SQLUtilities')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:sqlutil_keyword_case = '\U'
  endfunction
  call neobundle#untap()
endif
"}}}

" vimfiler {{{
if neobundle#tap('vimfiler')
  function! neobundle#tapped.hooks.on_source(bundle)
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_enable_auto_cd = 1

    nnoremap [vimfiler] <Nop>
    nmap <Leader>f [vimfiler]
    nnoremap <silent> [vimfiler] :<C-u>VimFilerExplorer -find -winwidth=20<CR>

  endfunction
  call neobundle#untap()
endif
"}}}

